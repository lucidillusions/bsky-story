name: Build and Deploy Jekyll with Webmentions

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential libssl-dev

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3.0"
          # Temporarily disable bundler-cache to force fresh install and better debug
          bundler-cache: false # COMMENT OUT OR REMOVE THIS LINE

      - name: Install Ruby Gems (verbose output)
        run: |
          bundle install --verbose

      - name: Debug - List installed Ruby Gems
        run: |
          bundle list --name-only | grep jekyll-webmention_io || echo "jekyll-webmention_io not found by bundle list"
          echo "Full bundle list:"
          bundle list

      # Remove the old cache step if it was there and you want to truly force no cache.
      # Or, keep it but ensure path and key are correct. For debugging, it's simpler to remove for now.
      # If you keep it, make sure 'path' includes 'vendor/bundle' if you're installing into there.
      - name: Cache Jekyll (optional during debug, can re-add later)
        uses: actions/cache@v4
        with:
          path: |
            _site
            .jekyll-cache
            .webmention-cache
            vendor/bundle # Ensure this is included if Bundler installs gems here
          key: ${{ runner.os }}-jekyll-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-jekyll-

      - name: Build Jekyll site
        run: |
          bundle exec jekyll build --verbose

      - name: Send Outgoing Webmentions
        run: |
          bundle exec jekyll webmention
        env:
          JEKYLL_ENV: production

      - name: Debug - List contents of potential JS output directories
        run: |
          echo "Listing contents of _site/ (root of deployed site):"
          ls -la _site/ || true # '|| true' prevents error if _site is empty or problematic
          echo "" # Add a blank line for readability

          echo "Listing contents of _site/js/:"
          ls -la _site/js/ || echo "_site/js/ directory not found or empty."
          echo ""

          echo "Listing contents of _site/assets/js/:"
          ls -la _site/assets/js/ || echo "_site/assets/js/ directory not found or empty."
          echo ""

          echo "Listing contents of _site/bsky-story/js/ (just in case):"
          ls -la _site/bsky-story/js/ || echo "_site/bsky-story/js/ directory not found or empty (as expected)."
          echo ""

      #- name: Deploy to Github Pages
      #  uses: JamesIves/github-pages-deploy-action@v4
      #  with:
      #    branch: gh-pages
      #    folder: _site

      #- name: Deploy to GitHub Pages
      #  uses: peaceiris/actions-gh-pages@v4
      #  with:
      #    github_token: ${{ secrets.GITHUB_TOKEN }}
      #    publish_dir: _site
      #    publish_branch: gh-pages
      #   keep_files: false
      # cname: ss.lucidillusions.in

      # --- REPLACE THE MANUAL DEPLOY STEP WITH THIS REFINED, AGGRESSIVE VERSION ---
      - name: Manual Deploy to GitHub Pages (Aggressive Reset Diagnostic)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eux # Exit immediately if a command exits with a non-zero status. Print commands and their arguments as they are executed.

          # Configure Git
          echo "--- Configuring Git ---"
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory /github/workspace

          # Define deployment directory
          DEPLOY_DIR="github-pages-deploy-temp"
          echo "Temporary Git clone directory: $DEPLOY_DIR"

          # Clone gh-pages branch or create orphan
          echo "--- Cloning gh-pages branch ---"
          if ! git ls-remote --heads origin gh-pages | grep -q 'refs/heads/gh-pages'; then
              echo "gh-pages branch does not exist, creating an orphan branch."
              git clone --depth=1 --single-branch --orphan gh-pages https://x-oauth-basic:${GH_TOKEN}@github.com/${{ github.repository }}.git "$DEPLOY_DIR"
              cd "$DEPLOY_DIR"
              git rm -rf . || true # Remove initial files from orphan branch if any
              git commit --allow-empty -m "Initial empty gh-pages branch" || true
              git push origin gh-pages
              cd - # Go back to original working dir
          fi

          # Use git worktree for a cleaner operation
          echo "--- Adding git worktree ---"
          git worktree add --force --detach "$DEPLOY_DIR" gh-pages

          # Go into the worktree
          cd "$DEPLOY_DIR"

          # --- AGGRESSIVE CLEAN AND RESET ---
          echo "--- Aggressively cleaning and resetting worktree ---"
          # This command deletes all untracked files and directories, and resets tracked files
          git clean -fdx # -f: force, -d: directories, -x: untracked files ignored by .gitignore
          git reset --hard origin/gh-pages # Ensures worktree matches remote head exactly

          # Now copy the _site contents into the cleaned worktree
          echo "--- Copying _site contents to worktree ---"
          rsync -av --checksum --progress /home/runner/work/bsky-story/bsky-story/_site/. "$DEPLOY_DIR/" --exclude .git --exclude .github --exclude .ssh # Exclude .git etc. from source

          # --- CRITICAL DEBUG CHECKS AFTER RSYNC ---
          echo "--- Contents of deployment target directory AFTER rsync ---"
          ls -lR . # List all files in the current directory (which is $DEPLOY_DIR)
          echo "--- Contents of js/ directory within target after rsync ---"
          ls -l js/ # Specifically check the js/ directory

          # Add, commit, and push changes
          echo "--- Adding files to git (forcing re-evaluation) ---"
          git add --all --force . # Keep --force here, it might be necessary

          echo "--- Git Status (final check for staged changes) ---"
          git status

          echo "--- Committing changes ---"
          # Only commit if there are actual changes
          if ! git diff-index --quiet HEAD; then
              git commit -m "Deploy from GitHub Actions (Aggressive Manual - ${{ github.sha }})"
          else
              echo "No changes detected to commit after rsync (this should not happen now)."
          fi

          echo "--- Pushing changes to gh-pages branch ---"
          git push --force origin gh-pages

          # Clean up temporary directory (remove the worktree)
          echo "--- Removing git worktree ---"
          cd /home/runner/work/bsky-story/bsky-story # Go back to original working dir
          git worktree remove --force "$DEPLOY_DIR" || true # Use || true to prevent job failure on cleanup
