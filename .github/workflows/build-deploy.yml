name: Build and Deploy Jekyll with Webmentions

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential libssl-dev

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3.0"
          # Temporarily disable bundler-cache to force fresh install and better debug
          bundler-cache: false # COMMENT OUT OR REMOVE THIS LINE

      - name: Install Ruby Gems (verbose output)
        run: |
          bundle install --verbose

      - name: Debug - List installed Ruby Gems
        run: |
          bundle list --name-only | grep jekyll-webmention_io || echo "jekyll-webmention_io not found by bundle list"
          echo "Full bundle list:"
          bundle list

      # Remove the old cache step if it was there and you want to truly force no cache.
      # Or, keep it but ensure path and key are correct. For debugging, it's simpler to remove for now.
      # If you keep it, make sure 'path' includes 'vendor/bundle' if you're installing into there.
      - name: Cache Jekyll (optional during debug, can re-add later)
        uses: actions/cache@v4
        with:
          path: |
            _site
            .jekyll-cache
            .webmention-cache
            vendor/bundle # Ensure this is included if Bundler installs gems here
          key: ${{ runner.os }}-jekyll-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-jekyll-

      - name: Build Jekyll site
        run: |
          bundle exec jekyll build --verbose

      - name: Send Outgoing Webmentions
        run: |
          bundle exec jekyll webmention
        env:
          JEKYLL_ENV: production

      - name: Workaround - create dummy dotfile in _site
        run: echo "" > _site/.dummy_file || true

      - name: Debug - List contents of potential JS output directories
        run: |
          echo "Listing contents of _site/ (root of deployed site):"
          ls -la _site/ || true # '|| true' prevents error if _site is empty or problematic
          echo "" # Add a blank line for readability

          echo "Listing contents of _site/js/:"
          ls -la _site/js/ || echo "_site/js/ directory not found or empty."
          echo ""

          echo "Listing contents of _site/assets/js/:"
          ls -la _site/assets/js/ || echo "_site/assets/js/ directory not found or empty."
          echo ""

          echo "Listing contents of _site/bsky-story/js/ (just in case):"
          ls -la _site/bsky-story/js/ || echo "_site/bsky-story/js/ directory not found or empty (as expected)."
          echo ""

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _site
          publish_branch: gh-pages
          keep_files: false
          # cname: ss.lucidillusions.in
